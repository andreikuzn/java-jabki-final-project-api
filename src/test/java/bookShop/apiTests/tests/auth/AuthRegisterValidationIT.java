package bookShop.apiTests.tests.auth;

import bookShop.apiTests.common.BaseIntegrationTest;
import bookShop.apiTests.model.RegisterRequest;
import bookShop.apiTests.common.ApiResponseAssert;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.DisplayName;
import io.restassured.response.Response;
import bookShop.apiTests.common.TestDataUtil;
import java.util.HashMap;
import java.util.Map;
import bookShop.repository.AppUserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import bookShop.apiTests.common.DbResponseAssert;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;
import org.junit.jupiter.params.provider.Arguments;
import java.util.stream.Stream;
import java.util.ArrayList;
import java.util.List;
import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import bookShop.apiTests.enums.ApiError;
import bookShop.apiTests.enums.ErrorMessage;
import bookShop.apiTests.enums.ApiError;
import bookShop.apiTests.enums.ApiHeader;
import bookShop.apiTests.enums.ApiPath;
import bookShop.apiTests.enums.ErrorMessage;
import bookShop.apiTests.enums.JsonPathKey;

import static bookShop.apiTests.enums.ApiError.FORBIDDEN;
import static bookShop.apiTests.enums.ApiError.METHOD_NOT_ALLOWED;
import static bookShop.apiTests.enums.ApiError.NOT_FOUND;
import static bookShop.apiTests.enums.ApiError.OK;
import static bookShop.apiTests.enums.ApiError.UNSUPPORTED_MEDIA_TYPE;
import static bookShop.apiTests.enums.ApiError.USER_ALREADY_EXISTS;
import static bookShop.apiTests.enums.ApiPath.AUTH_REGISTER;
import static bookShop.apiTests.enums.ApiPath.AUTH_REGISTER_NOT_EXIST;
import static bookShop.apiTests.enums.ErrorMessage.ADMIN_LIMIT;
import static bookShop.apiTests.enums.ErrorMessage.EMAIL_EMPTY;
import static bookShop.apiTests.enums.ErrorMessage.EMAIL_FORMAT;
import static bookShop.apiTests.enums.ErrorMessage.EMAIL_LENGTH;
import static bookShop.apiTests.enums.ErrorMessage.EMPTY_PASSWORD;
import static bookShop.apiTests.enums.ErrorMessage.EMPTY_USERNAME;
import static bookShop.apiTests.enums.ErrorMessage.ENDPOINT_NOT_FOUND;
import static bookShop.apiTests.enums.ErrorMessage.FORBIDDEN_CHARS;
import static bookShop.apiTests.enums.ErrorMessage.INVALID_OR_EMPTY_JSON;
import static bookShop.apiTests.enums.ErrorMessage.PHONE_EMPTY;
import static bookShop.apiTests.enums.ErrorMessage.PHONE_INVALID;
import static bookShop.apiTests.enums.ErrorMessage.USERNAME_LENGTH;
import static bookShop.apiTests.enums.JsonPathKey.DATA_ID;
import static bookShop.model.Role.USER;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static bookShop.model.Role.*;

@DisplayName("Auth /register: all fields headers positive/negative")
public class AuthRegisterValidationIT extends BaseIntegrationTest {

    @Autowired
    private AppUserRepository appUserRepository;

    private final List<String> createdUserIds = new ArrayList<>();

    private static Stream<Arguments> invalidPasswords() {
        return Stream.of(
                Arguments.of("testpass1!", "–±–µ–∑ –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã"),
                Arguments.of("TESTPASS1!", "–±–µ–∑ –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã"),
                Arguments.of("TEStPaSs!", "–±–µ–∑ —Ü–∏—Ñ—Ä—ã"),
                Arguments.of("Testpass1", "–±–µ–∑ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞"),
                Arguments.of("Testpass1!—Ñ", "—Å —Ä—É—Å—Å–∫–æ–π –±—É–∫–≤–æ–π"),
                Arguments.of("Test pass1!", "—Å –ø—Ä–æ–±–µ–ª–æ–º –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ")
        );
    }

    private static Stream<Arguments> invalidRoles() {
        return Stream.of(
                Arguments.of("", "–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞"),
                Arguments.of(" ", "–ø—Ä–æ–±–µ–ª"),
                Arguments.of(null, "null –∑–Ω–∞—á–µ–Ω–∏–µ")
        );
    }

    static Stream<Arguments> invalidPhoneFormats() {
        return Stream.of(
                Arguments.of("1234567890", "phone = 10 —Ü–∏—Ñ—Ä"),
                Arguments.of("123456789012", "phone = 12 —Ü–∏—Ñ—Ä"),
                Arguments.of("+7(999)000-11-22", "phone —Ñ–æ—Ä–º–∞—Ç —Å–æ —Å–∫–æ–±–∫–∞–º–∏"),
                Arguments.of("abcdefghijk", "phone –Ω–µ int (–±—É–∫–≤—ã)")
        );
    }

    private static Stream<Arguments> invalidEmailCases() {
        return Stream.of(
                Arguments.of("@mail.ru", "–ø—É—Å—Ç–æ –¥–æ @"),
                Arguments.of("test~@mail.ru", "~ –¥–æ @"),
                Arguments.of("&test*@mail.ru", "& –∏ * –¥–æ @"),
                Arguments.of("test@.ru", "–ø—É—Å—Ç–æ –ø–æ—Å–ª–µ @"),
                Arguments.of("test @mail.ru", "–ø—Ä–æ–±–µ–ª –¥–æ @"),
                Arguments.of("test@ mail.ru", "–ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ @"),
                Arguments.of("test@+mail.ru", "+ –ø–æ—Å–ª–µ @"),
                Arguments.of("test@mail%.ru", "% –ø–æ—Å–ª–µ @"),
                Arguments.of("test@mail .ru", "–ø—Ä–æ–±–µ–ª –ø–µ—Ä–µ–¥ —Ç–æ—á–∫–æ–π"),
                Arguments.of("test@mailru", "–±–µ–∑ —Ç–æ—á–∫–∏"),
                Arguments.of("test@mail. ru", "–ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏"),
                Arguments.of("testmail.ru", "–±–µ–∑ @"),
                Arguments.of("test@@mail.ru", "–¥–≤–µ @"),
                Arguments.of("test@mail.r", "–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–æ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ (r –≤–º–µ—Å—Ç–æ ru)"),
                Arguments.of("—Ä—É—Å—Å–∫–∏–µ@–±—É–∫–≤—ã.—Ä—É", "–∫–∏—Ä–∏–ª–ª–∏—Ü–∞")
        );
    }

    static Stream<Arguments> invalidUsernames() {
        return Stream.of(
                Arguments.of("", "–ø—É—Å—Ç–æ"),
                Arguments.of(" ", "–ø—Ä–æ–±–µ–ª"),
                Arguments.of(null, "null")
        );
    }

    static Stream<Arguments> forbiddenUsernameCases() {
        return Stream.of(
                Arguments.of("emojiiüòÄ", "emoji/unicode"),
                Arguments.of("<script>alert('xss')</script>", "XSS-–∏–Ω—ä–µ–∫—Ü–∏—è"),
                Arguments.of("user'; DROP TABLE users;--", "SQL-–∏–Ω—ä–µ–∫—Ü–∏—è")
        );
    }

    static Stream<Arguments> emptyOrNullPasswordCases() {
        return Stream.of(
                Arguments.of("", "–ø—É—Å—Ç–æ"),
                Arguments.of(" ", "–ø—Ä–æ–±–µ–ª"),
                Arguments.of(null, "null")
        );
    }

    static Stream<Arguments> invalidPasswordSymbolCases() {
        return Stream.of(
                Arguments.of("emojiiüòÄ", "emoji/—é–Ω–∏–∫–æ–¥"),
                Arguments.of("<script>alert('xss')</script>", "XSS-–∏–Ω—ä–µ–∫—Ü–∏—è"),
                Arguments.of("user'; DROP TABLE users;--", "SQL-–∏–Ω—ä–µ–∫—Ü–∏—è")
        );
    }

    static Stream<Arguments> invalidRoleSymbolCases() {
        return Stream.of(
                Arguments.of("BOSS", "–¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"),
                Arguments.of("emojiiüòÄ", "emoji/—é–Ω–∏–∫–æ–¥"),
                Arguments.of("<script>alert('xss')</script>", "XSS-–∏–Ω—ä–µ–∫—Ü–∏—è"),
                Arguments.of("user'; DROP TABLE users;--", "SQL-–∏–Ω—ä–µ–∫—Ü–∏—è")
        );
    }

    static Stream<Arguments> invalidPhoneEmptyCases() {
        return Stream.of(
                Arguments.of(null, PHONE_EMPTY.getMsg()),
                Arguments.of("", PHONE_EMPTY.getMsg()),
                Arguments.of(" ", PHONE_EMPTY.getMsg())
        );
    }

    static Stream<Arguments> invalidPhoneSpecialCases() {
        return Stream.of(
                Arguments.of("emojiiüòÄ", "emoji/—é–Ω–∏–∫–æ–¥"),
                Arguments.of("<script>alert('xss')</script>", "XSS-–∏–Ω—ä–µ–∫—Ü–∏—è"),
                Arguments.of("user'; DROP TABLE users;--", "SQL-–∏–Ω—ä–µ–∫—Ü–∏—è")
        );
    }

    static Stream<Arguments> invalidEmailEmptyCases() {
        return Stream.of(
                Arguments.of(null, "null", true),
                Arguments.of("", "–ø—É—Å—Ç–æ", false),
                Arguments.of(" ", "–ø—Ä–æ–±–µ–ª", false)
        );
    }

    static Stream<Arguments> invalidEmailSpecialCases() {
        return Stream.of(
                Arguments.of("emojiiüòÄ@mail.ru", "emoji/—é–Ω–∏–∫–æ–¥"),
                Arguments.of("<script>alert('xss')</script>", "XSS-–∏–Ω—ä–µ–∫—Ü–∏—è"),
                Arguments.of("user'; DROP TABLE users;--", "SQL-–∏–Ω—ä–µ–∫—Ü–∏—è")
        );
    }

    static Stream<Arguments> invalidJsonRequests() {
        return Stream.of(
                Arguments.of("[{ \"username\": \"user\" }]", "–º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ –æ–±—ä–µ–∫—Ç–∞"),
                Arguments.of("12345", "—á–∏—Å–ª–æ –≤–º–µ—Å—Ç–æ –æ–±—ä–µ–∫—Ç–∞"),
                Arguments.of("\"justastring\"", "—Å—Ç—Ä–æ–∫–∞ –≤–º–µ—Å—Ç–æ –æ–±—ä–µ–∫—Ç–∞"),
                Arguments.of("null", "null –≤–º–µ—Å—Ç–æ –æ–±—ä–µ–∫—Ç–∞"),
                Arguments.of("{username:123}", "–Ω–µ—Ç –∫–∞–≤—ã—á–µ–∫ –≤–æ–∫—Ä—É–≥ –∫–ª—é—á–∞"),
                Arguments.of("{ \"username\": \"user\", ", "–Ω–µ—Ç –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–∏")
        );
    }

    // ====== –í–∞–ª–∏–¥–∞—Ü–∏—è username ======

    @ParameterizedTest(name = "[{index}] username=\"{0}\" ‚Äî {1}")
    @MethodSource("invalidUsernames")
    @DisplayName("Register: username –Ω–µ–≤–∞–ª–∏–¥–µ–Ω (–ø—É—Å—Ç–æ/–ø—Ä–æ–±–µ–ª/null)")
    void registerWithInvalidUsername(String username, String description) {
        RegisterRequest request = userTestUtil.generateRandomUser().toBuilder()
                .username(username)
                .build();
        Response response = apiHelper.post(AUTH_REGISTER.getPath(), request);
        if (username == null) {
            ApiResponseAssert.assertError(
                    response,
                    ApiError.BAD_REQUEST.getStatus(),
                    ApiError.BAD_REQUEST.getCode(),
                    EMPTY_USERNAME.getMsg()
            );
        } else {
            ApiResponseAssert.assertErrorPartly(
                    response,
                    ApiError.BAD_REQUEST.getStatus(),
                    ApiError.BAD_REQUEST.getCode(),
                    EMPTY_USERNAME.getMsg()
            );
        }
        DbResponseAssert.assertUserNotExistsInDb(appUserRepository, request.getUsername());
    }

    @Test
    @DisplayName("Register: username = int –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏")
    void registerWithIntUsername() {
        String password = TestDataUtil.validPassword();
        String email = TestDataUtil.randomEmail();
        String phone = TestDataUtil.randomPhone();
        int usernameAsInt = 1012345;
        Map<String, Object> request = new HashMap<>();
        request.put("username", usernameAsInt);
        request.put("password", password);
        request.put("role", USER);
        request.put("phone", phone);
        request.put("email", email);
        String userId = null;
        try {
            Response response = apiHelper.post(AUTH_REGISTER.getPath(), request);
            ApiResponseAssert.assertRegisterSuccess(
                    response,
                    email,
                    String.valueOf(usernameAsInt),
                    USER.name(),
                    phone
            );
            userId = response.jsonPath().getString(DATA_ID.getPath());
            DbResponseAssert.assertUserCorrectInDb(
                    appUserRepository,
                    String.valueOf(usernameAsInt),
                    email,
                    phone,
                    USER);
        } finally {
            if (userId != null) {
                userTestUtil.deleteUser(userId);
                DbResponseAssert.assertUserDeletedInDb(appUserRepository, userId);
            }
        }
    }

    @Test
    @DisplayName("Register: username = int —Å –ª–∏–¥–∏—Ä—É—é—â–∏–º –Ω—É–ª—ë–º")
    void registerWithIntUsernameLeadingZero() {
        String password = TestDataUtil.validPassword();
        String email = TestDataUtil.randomEmail();
        String phone = TestDataUtil.randomPhone();
        String badRequestJson = "{"
                + "\"username\": 012345,"
                + "\"password\": \"" + password + "\","
                + "\"role\": \"USER\","
                + "\"phone\": \"" + phone + "\","
                + "\"email\": \"" + email + "\""
                + "}";
        long countBefore = appUserRepository.count();
        Response response = apiHelper.post(AUTH_REGISTER.getPath(), badRequestJson);
        ApiResponseAssert.assertError(
                response,
                ApiError.BAD_REQUEST.getStatus(),
                ApiError.BAD_REQUEST.getCode(),
                INVALID_OR_EMPTY_JSON.getMsg()
        );
        long countAfter = appUserRepository.count();
        assertEquals(countBefore, countAfter, "–í –ë–î –Ω–µ –¥–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
    }

    @Test
    @DisplayName("Register: username = 1 —Å–∏–º–≤–æ–ª")
    void registerWithUsername1Symbol() {
        RegisterRequest request = userTestUtil.generateRandomUser().toBuilder()
                .username("a")
                .build();
        Response response = apiHelper.post(AUTH_REGISTER.getPath(), request);
        ApiResponseAssert.assertError(
                response,
                ApiError.BAD_REQUEST.getStatus(),
                ApiError.BAD_REQUEST.getCode(),
                USERNAME_LENGTH.getMsg()
        );
        DbResponseAssert.assertUserNotExistsInDb(appUserRepository, request.getUsername());
    }

    @Test
    @DisplayName("Register: username = 2 —Å–∏–º–≤–æ–ª–∞")
    void registerWithUsername2Symbols() {
        RegisterRequest request = userTestUtil.generateRandomUser().toBuilder()
                .username("av")
                .build();
        String userId = null;
        try {
            Response response = apiHelper.post(AUTH_REGISTER.getPath(), request);
            ApiResponseAssert.assertRegisterSuccess(
                    response,
                    request.getEmail(),
                    request.getUsername(),
                    request.getRole(),
                    request.getPhone()
            );
            userId = response.jsonPath().getString(DATA_ID.getPath());
            DbResponseAssert.assertUserCorrectInDb(
                    appUserRepository,
                    request.getUsername(),
                    request.getEmail(),
                    request.getPhone(),
                    USER);
        } finally {
            if (userId != null) {
                userTestUtil.deleteUser(userId);
                DbResponseAssert.assertUserDeletedInDb(appUserRepository, userId);
            }
        }
    }

    @Test
    @DisplayName("Register: username = 32 —Å–∏–º–≤–æ–ª–∞")
    void registerWithUsername32Symbols() {
        RegisterRequest request = userTestUtil.generateRandomUser().toBuilder()
                .username("b".repeat(32))
                .build();
        String userId = null;
        try {
            Response response = apiHelper.post(AUTH_REGISTER.getPath(), request);
            ApiResponseAssert.assertRegisterSuccess(
                    response,
                    request.getEmail(),
                    request.getUsername(),
                    request.getRole(),
                    request.getPhone()
            );
            userId = response.jsonPath().getString(DATA_ID.getPath());
            DbResponseAssert.assertUserCorrectInDb(
                    appUserRepository,
                    request.getUsername(),
                    request.getEmail(),
                    request.getPhone(),
                    USER);
        } finally {
            if (userId != null) {
                userTestUtil.deleteUser(userId);
                DbResponseAssert.assertUserDeletedInDb(appUserRepository, userId);
            }
        }
    }

    @Test
    @DisplayName("Register: username = 33 —Å–∏–º–≤–æ–ª–∞")
    void registerWithUsername33Symbols() {
        RegisterRequest request = userTestUtil.generateRandomUser().toBuilder()
                .username("b".repeat(33))
                .build();
        Response response = apiHelper.post(AUTH_REGISTER.getPath(), request);
        ApiResponseAssert.assertError(
                response,
                ApiError.BAD_REQUEST.getStatus(),
                ApiError.BAD_REQUEST.getCode(),
                USERNAME_LENGTH.getMsg()
        );
        DbResponseAssert.assertUserNotExistsInDb(appUserRepository, request.getUsername());
    }

    @ParameterizedTest(name = "[{index}] username=\"{0}\" ‚Äî {1}")
    @MethodSource("forbiddenUsernameCases")
    @DisplayName("Register: username —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (emoji/XSS/SQL)")
    void registerWithForbiddenUsernameSymbols(String username, String description) {
        RegisterRequest request = userTestUtil.generateRandomUser().toBuilder()
                .username(username)
                .build();
        long countBefore = appUserRepository.count();
        Response response = apiHelper.post(AUTH_REGISTER.getPath(), request);
        ApiResponseAssert.assertErrorPartly(
                response,
                ApiError.BAD_REQUEST.getStatus(),
                ApiError.BAD_REQUEST.getCode(),
                FORBIDDEN_CHARS.getMsg()
        );
        long countAfter = appUserRepository.count();
        assertEquals(countBefore, countAfter, "–í –ë–î –Ω–µ –¥–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (" + description + ")");
    }

    @Test
    @DisplayName("Register: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å —Ä–∞–∑–Ω—ã–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º username")
    void registerSameUsernameDifferentCase() {
        RegisterRequest first = userTestUtil.generateRandomUser().toBuilder()
                .username("USER")
                .build();
        String userIdFirst = null;
        String userIdSecond = null;
        try {
            Response firstResponse = apiHelper.post(AUTH_REGISTER.getPath(), first);
            ApiResponseAssert.assertRegisterSuccess(
                    firstResponse,
                    first.getEmail(),
                    first.getUsername(),
                    first.getRole(),
                    first.getPhone()
            );
            userIdFirst = firstResponse.jsonPath().getString(DATA_ID.getPath());
            DbResponseAssert.assertUserCorrectInDb(
                    appUserRepository,
                    first.getUsername(),
                    first.getEmail(),
                    first.getPhone(),
                    USER);
            RegisterRequest second = userTestUtil.generateRandomUser().toBuilder()
                    .username("user")
                    .build();
            Response secondResponse = apiHelper.post(AUTH_REGISTER.getPath(), second);
            ApiResponseAssert.assertRegisterSuccess(
                    secondResponse,
                    second.getEmail(),
                    second.getUsername(),
                    second.getRole(),
                    second.getPhone()
            );
            userIdSecond = secondResponse.jsonPath().getString(DATA_ID.getPath());
            DbResponseAssert.assertUserCorrectInDb(
                    appUserRepository,
                    second.getUsername(),
                    second.getEmail(),
                    second.getPhone(),
                    USER);
        } finally {
            if (userIdFirst != null || userIdSecond != null) {
                userTestUtil.deleteUser(userIdFirst);
                userTestUtil.deleteUser(userIdSecond);
                DbResponseAssert.assertUserDeletedInDb(appUserRepository, userIdFirst);
                DbResponseAssert.assertUserDeletedInDb(appUserRepository, userIdSecond);
            }
        }
    }

    // ====== –í–∞–ª–∏–¥–∞—Ü–∏—è password ======

    @ParameterizedTest(name = "[{index}] password=\"{0}\" ‚Äî {1}")
    @MethodSource("emptyOrNullPasswordCases")
    @DisplayName("Register: password = –ø—É—Å—Ç–æ/–ø—Ä–æ–±–µ–ª/null")
    void registerWithEmptyOrNullPassword(String password, String description) {
        RegisterRequest request = userTestUtil.generateRandomUser().toBuilder()
                .password(password)
                .build();
        Response response = apiHelper.post(AUTH_REGISTER.getPath(), request);
        ApiResponseAssert.assertErrorPartly(
                response,
                ApiError.BAD_REQUEST.getStatus(),
                ApiError.BAD_REQUEST.getCode(),
                EMPTY_PASSWORD.getMsg());
        DbResponseAssert.assertUserNotExistsInDb(appUserRepository, request.getUsername());
    }

    @Test
    @DisplayName("Register: password = int –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏")
    void registerWithIntPassword() {
        String username = TestDataUtil.randomUsername();
        String email = TestDataUtil.randomEmail();
        String phone = TestDataUtil.randomPhone();
        int passwordAsInt = 1012345;
        Map<String, Object> request = new HashMap<>();
        request.put("username", username);
        request.put("password", passwordAsInt);
        request.put("role", "USER");
        request.put("phone", phone);
        request.put("email", email);
        Response response = apiHelper.post(AUTH_REGISTER.getPath(), request);
        ApiResponseAssert.assertErrorPartly(
                response,
                ApiError.BAD_REQUEST.getStatus(),
                ApiError.BAD_REQUEST.getCode(),
                EMPTY_PASSWORD.getMsg());
        DbResponseAssert.assertUserNotExistsInDb(appUserRepository, username);
    }

    @Test
    @DisplayName("Register: password = int —Å –ª–∏–¥–∏—Ä—É—é—â–∏–º –Ω—É–ª—ë–º")
    void registerWithIntPasswordLeadingZero() {
        String username = TestDataUtil.randomUsername();
        String email = TestDataUtil.randomEmail();
        String phone = TestDataUtil.randomPhone();
        String badRequestJson = "{"
                + "\"username\": \"" + username + "\","
                + "\"password\": 0123456,"
                + "\"role\": \"USER\","
                + "\"phone\": \"" + phone + "\","
                + "\"email\": \"" + email + "\""
                + "}";
        Response response = apiHelper.post(AUTH_REGISTER.getPath(), badRequestJson);
        ApiResponseAssert.assertError(
                response,
                ApiError.BAD_REQUEST.getStatus(),
                ApiError.BAD_REQUEST.getCode(),
                INVALID_OR_EMPTY_JSON.getMsg()
        );
        DbResponseAssert.assertUserNotExistsInDb(appUserRepository, username);
    }

    @Test
    @DisplayName("Register: password = 5 —Å–∏–º–≤–æ–ª–æ–≤ (–Ω–µ–≤–∞–ª–∏–¥)")
    void registerWithPassword5Symbols() {
        RegisterRequest request = userTestUtil.generateRandomUser().toBuilder()
                .password("A1b!2")
                .build();
        Response response = apiHelper.post(AUTH_REGISTER.getPath(), request);
        ApiResponseAssert.assertErrorPartly(
                response,
                ApiError.BAD_REQUEST.getStatus(),
                ApiError.BAD_REQUEST.getCode(),
                EMPTY_PASSWORD.getMsg());
        DbResponseAssert.assertUserNotExistsInDb(appUserRepository, request.getUsername());
    }

    @Test
    @DisplayName("Register: password = 6 —Å–∏–º–≤–æ–ª–æ–≤ (–≤–∞–ª–∏–¥)")
    void registerWithPassword6Symbols() {
        RegisterRequest request = userTestUtil.generateRandomUser().toBuilder()
                .password("A1b!r2")
                .build();
        String userId = null;
        try {
            Response response = apiHelper.post(AUTH_REGISTER.getPath(), request);
            ApiResponseAssert.assertRegisterSuccess(
                    response,
                    request.getEmail(),
                    request.getUsername(),
                    request.getRole(),
                    request.getPhone()
            );
            userId = response.jsonPath().getString(DATA_ID.getPath());
            DbResponseAssert.assertUserCorrectInDb(
                    appUserRepository,
                    request.getUsername(),
                    request.getEmail(),
                    request.getPhone(),
                    USER);
        } finally {
            if (userId != null) {
                userTestUtil.deleteUser(userId);
                DbResponseAssert.assertUserDeletedInDb(appUserRepository, userId);
            }
        }
    }

    @Test
    @DisplayName("Register: password = 64 —Å–∏–º–≤–æ–ª–∞ (–≤–∞–ª–∏–¥)")
    void registerWithPassword64Symbols() {
        RegisterRequest request = userTestUtil.generateRandomUser().toBuilder()
                .password("A1b@" + "a".repeat(60))
                .build();
        String userId = null;
        try {
            Response response = apiHelper.post(AUTH_REGISTER.getPath(), request);
            ApiResponseAssert.assertRegisterSuccess(
                    response,
                    request.getEmail(),
                    request.getUsername(),
                    request.getRole(),
                    request.getPhone()
            );
            userId = response.jsonPath().getString(DATA_ID.getPath());
            DbResponseAssert.assertUserCorrectInDb(
                    appUserRepository,
                    request.getUsername(),
                    request.getEmail(),
                    request.getPhone(),
                    USER);
        } finally {
            if (userId != null) {
                userTestUtil.deleteUser(userId);
                DbResponseAssert.assertUserDeletedInDb(appUserRepository, userId);
            }
        }
    }

    @Test
    @DisplayName("Register: password = 65 —Å–∏–º–≤–æ–ª–æ–≤ (–Ω–µ–≤–∞–ª–∏–¥)")
    void registerWithPassword65Symbols() {
        RegisterRequest request = userTestUtil.generateRandomUser().toBuilder()
                .password("A1b!" + "a".repeat(61))
                .build();
        Response response = apiHelper.post(AUTH_REGISTER.getPath(), request);
        ApiResponseAssert.assertErrorPartly(
                response,
                ApiError.BAD_REQUEST.getStatus(),
                ApiError.BAD_REQUEST.getCode(),
                EMPTY_PASSWORD.getMsg());
        DbResponseAssert.assertUserNotExistsInDb(appUserRepository, request.getUsername());
    }

    @ParameterizedTest(name = "[{index}] password=\"{0}\" ‚Äî {1}")
    @MethodSource("invalidPasswords")
    @DisplayName("Register: password –Ω–µ–≤–∞–ª–∏–¥–µ–Ω (–ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π)")
    void registerWithInvalidPassword(String password, String caseDescription) {
        RegisterRequest request = userTestUtil.generateRandomUser().toBuilder()
                .password(password)
                .build();
        Response response = apiHelper.post(AUTH_REGISTER.getPath(), request);
        ApiResponseAssert.assertErrorPartly(
                response,
                ApiError.BAD_REQUEST.getStatus(),
                ApiError.BAD_REQUEST.getCode(),
                EMPTY_PASSWORD.getMsg());
        assertTrue(response.asString().contains("password"),
                "–û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è –∫ –ø–∞—Ä–æ–ª—é (" + caseDescription + ")");
        DbResponseAssert.assertUserNotExistsInDb(appUserRepository, request.getUsername());
    }

    @ParameterizedTest(name = "[{index}] password=\"{0}\" ‚Äî {1}")
    @MethodSource("invalidPasswordSymbolCases")
    @DisplayName("Register: password —Å emoji/—é–Ω–∏–∫–æ–¥–æ–º/XSS/SQL-–∏–Ω—ä–µ–∫—Ü–∏–µ–π")
    void registerWithInvalidPasswordSymbols(String password, String description) {
        RegisterRequest request = userTestUtil.generateRandomUser().toBuilder()
                .password(password)
                .build();
        Response response = apiHelper.post(AUTH_REGISTER.getPath(), request);
        ApiResponseAssert.assertErrorPartly(
                response,
                ApiError.BAD_REQUEST.getStatus(),
                ApiError.BAD_REQUEST.getCode(),
                FORBIDDEN_CHARS.getMsg()
        );
        DbResponseAssert.assertUserNotExistsInDb(appUserRepository, request.getUsername());
    }

    // ====== –í–∞–ª–∏–¥–∞—Ü–∏—è role ======

    @Test
    @DisplayName("Register: role = –±—É–∫–≤—ã —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤")
    void registerWithUpAndLowerCasesRole() {
        RegisterRequest request = userTestUtil.generateRandomUser().toBuilder()
                .role("UseR")
                .build();
        String userId = null;
        try {
            Response response = apiHelper.post(AUTH_REGISTER.getPath(), request);
            ApiResponseAssert.assertRegisterSuccess(
                    response,
                    request.getEmail(),
                    request.getUsername(),
                    USER.getEnName(),
                    request.getPhone()
            );
            userId = response.jsonPath().getString(DATA_ID.getPath());
            DbResponseAssert.assertUserCorrectInDb(
                    appUserRepository,
                    request.getUsername(),
                    request.getEmail(),
                    request.getPhone(),
                    USER);
        } finally {
            if (userId != null) {
                userTestUtil.deleteUser(userId);
                DbResponseAssert.assertUserDeletedInDb(appUserRepository, userId);
            }
        }
    }

    @Test
    @DisplayName("Register: role = –º–∞–ª–µ–Ω—å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏")
    void registerWithLowerCaseRole() {
        RegisterRequest request = userTestUtil.generateRandomUser().toBuilder()
                .role("user")
                .build();
        String userId = null;
        try {
            Response response = apiHelper.post(AUTH_REGISTER.getPath(), request);
            ApiResponseAssert.assertRegisterSuccess(
                    response,
                    request.getEmail(),
                    request.getUsername(),
                    USER.getEnName(),
                    request.getPhone()
            );
            userId = response.jsonPath().getString(DATA_ID.getPath());
            DbResponseAssert.assertUserCorrectInDb(
                    appUserRepository,
                    request.getUsername(),
                    request.getEmail(),
                    request.getPhone(),
                    USER);
        } finally {
            if (userId != null) {
                userTestUtil.deleteUser(userId);
                DbResponseAssert.assertUserDeletedInDb(appUserRepository, userId);
            }
        }
    }

    @ParameterizedTest(name = "[{index}] role=\"{0}\" ‚Äî {1}")
    @MethodSource("invalidRoles")
    @DisplayName("Register: –Ω–µ–≤–∞–ª–∏–¥–Ω–∞—è —Ä–æ–ª—å (–ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π)")
    void registerWithInvalidRole(String role, String caseDescription) {
        RegisterRequest request = userTestUtil.generateRandomUser().toBuilder()
                .role(role)
                .build();
        Response response = apiHelper.post(AUTH_REGISTER.getPath(), request);
        assertTrue(response.asString().contains("role") || response.asString().contains("role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞; "),
                "–û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è –∫ —Ä–æ–ª–∏ (" + caseDescription + ")");
        ApiResponseAssert.assertError(
                response,
                ApiError.BAD_REQUEST.getStatus(),
                ApiError.BAD_REQUEST.getCode(),
                "role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞; "
        );
        DbResponseAssert.assertUserNotExistsInDb(appUserRepository, request.getUsername());
    }

    @Test
    @DisplayName("Register: role = int –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏")
    void registerWithIntRole() {
        String username = TestDataUtil.randomUsername();
        String email = TestDataUtil.randomEmail();
        String phone = TestDataUtil.randomPhone();
        String password = TestDataUtil.validPassword();
        int role = 123456;
        Map<String, Object> request = new HashMap<>();
        request.put("username", username);
        request.put("password", password);
        request.put("role", role);
        request.put("phone", phone);
        request.put("email", email);
        Response response = apiHelper.post(AUTH_REGISTER.getPath(), request);
        ApiResponseAssert.assertError(
                response,
                ApiError.BAD_REQUEST.getStatus(),
                ApiError.BAD_REQUEST.getCode(),
                INVALID_OR_EMPTY_JSON.getMsg()
        );
        DbResponseAssert.assertUserNotExistsInDb(appUserRepository, username);
    }

    @ParameterizedTest(name = "[{index}] role=\"{0}\" ‚Äî {1}")
    @MethodSource("invalidRoleSymbolCases")
    @DisplayName("Register: role = –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ/emoji/—é–Ω–∏–∫–æ–¥/XSS/SQL-–∏–Ω—ä–µ–∫—Ü–∏—è")
    void registerWithInvalidRoleSymbols(String role, String description) {
        RegisterRequest request = userTestUtil.generateRandomUser().toBuilder()
                .role(role)
                .build();
        Response response = apiHelper.post(AUTH_REGISTER.getPath(), request);
        ApiResponseAssert.assertError(
                response,
                ApiError.BAD_REQUEST.getStatus(),
                ApiError.BAD_REQUEST.getCode(),
                INVALID_OR_EMPTY_JSON.getMsg()
        );
        DbResponseAssert.assertUserNotExistsInDb(appUserRepository, request.getUsername());
    }

    // ====== –í–∞–ª–∏–¥–∞—Ü–∏—è phone ======

    @ParameterizedTest(name = "[{index}] phone=\"{0}\" ‚Äî {1}")
    @MethodSource("invalidPhoneEmptyCases")
    @DisplayName("Register: phone = null/–ø—É—Å—Ç–æ/–ø—Ä–æ–±–µ–ª")
    void registerWithEmptyOrNullPhone(String phone, String expectedError) {
        RegisterRequest request = userTestUtil.generateRandomUser().toBuilder()
                .phone(phone)
                .build();
        Response response = apiHelper.post(AUTH_REGISTER.getPath(), request);
        ApiResponseAssert.assertErrorPartly(
                response,
                ApiError.BAD_REQUEST.getStatus(),
                ApiError.BAD_REQUEST.getCode(),
                expectedError
        );
        DbResponseAssert.assertUserNotExistsInDb(appUserRepository, request.getUsername());
    }

    @ParameterizedTest(name = "[{index}] phone=\"{0}\" ‚Äî {1}")
    @MethodSource("invalidPhoneFormats")
    @DisplayName("Register: phone –Ω–µ–≤–∞–ª–∏–¥–µ–Ω (–ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π)")
    void registerWithInvalidPhoneFormats(String phone, String caseDescription) {
        RegisterRequest request = userTestUtil.generateRandomUser().toBuilder()
                .phone(phone)
                .build();
        Response response = apiHelper.post(AUTH_REGISTER.getPath(), request);
        assertTrue(response.asString().contains("phone"),
                "–û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è –∫ —Ç–µ–ª–µ—Ñ–æ–Ω—É (" + caseDescription + ")");
        ApiResponseAssert.assertError(
                response,
                ApiError.BAD_REQUEST.getStatus(),
                ApiError.BAD_REQUEST.getCode(),
                PHONE_INVALID.getMsg()
        );
        DbResponseAssert.assertUserNotExistsInDb(appUserRepository, request.getUsername());
    }

    @ParameterizedTest(name = "[{index}] phone=\"{0}\" ‚Äî {1}")
    @MethodSource("invalidPhoneSpecialCases")
    @DisplayName("Register: phone —Å emoji/—é–Ω–∏–∫–æ–¥–æ–º, XSS –∏–ª–∏ SQL-–∏–Ω—ä–µ–∫—Ü–∏–µ–π")
    void registerWithSpecialPhoneValues(String phone, String caseDescription) {
        RegisterRequest request = userTestUtil.generateRandomUser().toBuilder()
                .phone(phone)
                .build();
        Response response = apiHelper.post(AUTH_REGISTER.getPath(), request);
        ApiResponseAssert.assertErrorPartly(
                response,
                ApiError.BAD_REQUEST.getStatus(),
                ApiError.BAD_REQUEST.getCode(),
                "–¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ä–æ–≤–Ω–æ –∏–∑ 11 —Ü–∏—Ñ—Ä;"
        );
        DbResponseAssert.assertUserNotExistsInDb(appUserRepository, request.getUsername());
    }

    // ====== –í–∞–ª–∏–¥–∞—Ü–∏—è email ======

    @Test
    @DisplayName("Register: email —Å –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏")
    void registerWithEmailWithTwoPoints() {
        RegisterRequest request = userTestUtil.generateRandomUser().toBuilder()
                .email("test@mail..ru")
                .build();
        String userId = null;
        try {
            Response response = apiHelper.post(AUTH_REGISTER.getPath(), request);
            ApiResponseAssert.assertRegisterSuccess(
                    response,
                    request.getEmail(),
                    request.getUsername(),
                    request.getRole(),
                    request.getPhone()
            );
            userId = response.jsonPath().getString(DATA_ID.getPath());
            DbResponseAssert.assertUserCorrectInDb(
                    appUserRepository,
                    request.getUsername(),
                    request.getEmail(),
                    request.getPhone(),
                    USER);
        } finally {
            if (userId != null) {
                userTestUtil.deleteUser(userId);
                DbResponseAssert.assertUserDeletedInDb(appUserRepository, userId);
            }
        }
    }

    @Test
    @DisplayName("Register: email –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ (–º–∏–Ω –¥–ª–∏–Ω–∞)")
    void registerWithEmail1LongName() {
        RegisterRequest request = userTestUtil.generateRandomUser().toBuilder()
                .email("1@a.ru")
                .build();
        String userId = null;
        try {
            Response response = apiHelper.post(AUTH_REGISTER.getPath(), request);
            ApiResponseAssert.assertRegisterSuccess(
                    response,
                    request.getEmail(),
                    request.getUsername(),
                    request.getRole(),
                    request.getPhone()
            );
            userId = response.jsonPath().getString(DATA_ID.getPath());
            DbResponseAssert.assertUserCorrectInDb(
                    appUserRepository,
                    request.getUsername(),
                    request.getEmail(),
                    request.getPhone(),
                    USER);
        } finally {
            if (userId != null) {
                userTestUtil.deleteUser(userId);
                DbResponseAssert.assertUserDeletedInDb(appUserRepository, userId);
            }
        }
    }

    @Test
    @DisplayName("Register: email –≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ (255 —Å–∏–º–≤–æ–ª–æ–≤)")
    void registerWithEmail255Long() {
        RegisterRequest request = userTestUtil.generateRandomUser().toBuilder()
                .email("q".repeat(247) + "@mail.ru")
                .build();
        String userId = null;
        try {
            Response response = apiHelper.post(AUTH_REGISTER.getPath(), request);
            ApiResponseAssert.assertRegisterSuccess(
                    response,
                    request.getEmail(),
                    request.getUsername(),
                    request.getRole(),
                    request.getPhone()
            );
            userId = response.jsonPath().getString(DATA_ID.getPath());
            DbResponseAssert.assertUserCorrectInDb(
                    appUserRepository,
                    request.getUsername(),
                    request.getEmail(),
                    request.getPhone(),
                    USER);
        } finally {
            if (userId != null) {
                userTestUtil.deleteUser(userId);
                DbResponseAssert.assertUserDeletedInDb(appUserRepository, userId);
            }
        }
    }

    @Test
    @DisplayName("Register: email –≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ + 1 (256 —Å–∏–º–≤–æ–ª–æ–≤)")
    void registerWithEmail256Long() {
        RegisterRequest request = userTestUtil.generateRandomUser().toBuilder()
                .email("test@" + "q".repeat(248) + ".ru")
                .build();
        Response response = apiHelper.post(AUTH_REGISTER.getPath(), request);
        ApiResponseAssert.assertError(
                response,
                ApiError.BAD_REQUEST.getStatus(),
                ApiError.BAD_REQUEST.getCode(),
                EMAIL_LENGTH.getMsg()
        );
        DbResponseAssert.assertUserNotExistsInDb(appUserRepository, request.getUsername());
    }

    @ParameterizedTest(name = "[{index}] email=\"{0}\" ‚Äî {1}")
    @MethodSource("invalidEmailEmptyCases")
    @DisplayName("Register: email = null/–ø—É—Å—Ç–æ/–ø—Ä–æ–±–µ–ª")
    void registerWithEmptyOrNullEmail(String email, String caseDescription, boolean expectFull) {
        RegisterRequest request = userTestUtil.generateRandomUser().toBuilder()
                .email(email)
                .build();
        Response response = apiHelper.post(AUTH_REGISTER.getPath(), request);

        if (expectFull) {
            ApiResponseAssert.assertError(
                    response,
                    ApiError.BAD_REQUEST.getStatus(),
                    ApiError.BAD_REQUEST.getCode(),
                    EMAIL_EMPTY.getMsg()
            );
        } else {
            ApiResponseAssert.assertErrorPartly(
                    response,
                    ApiError.BAD_REQUEST.getStatus(),
                    ApiError.BAD_REQUEST.getCode(),
                    EMAIL_EMPTY.getMsg()
            );
        }
        DbResponseAssert.assertUserNotExistsInDb(appUserRepository, request.getUsername());
    }

    @ParameterizedTest(name = "[{index}] email=\"{0}\" ‚Äî {1}")
    @MethodSource("invalidEmailCases")
    @DisplayName("Register: email –Ω–µ–≤–∞–ª–∏–¥–µ–Ω (–ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π)")
    void registerWithInvalidEmail(String email, String caseDescription) {
        RegisterRequest request = userTestUtil.generateRandomUser().toBuilder()
                .email(email)
                .build();
        Response response = apiHelper.post(AUTH_REGISTER.getPath(), request);
        ApiResponseAssert.assertError(
                response,
                ApiError.BAD_REQUEST.getStatus(),
                ApiError.BAD_REQUEST.getCode(),
                EMAIL_FORMAT.getMsg()
        );
        assertTrue(response.asString().contains("email"),
                "–û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è –∫ email (" + caseDescription + ")");
        DbResponseAssert.assertUserNotExistsInDb(appUserRepository, request.getUsername());
    }

    @ParameterizedTest(name = "[{index}] email=\"{0}\" ‚Äî {1}")
    @MethodSource("invalidEmailSpecialCases")
    @DisplayName("Register: email —Å emoji/—é–Ω–∏–∫–æ–¥–æ–º, XSS, SQL-–∏–Ω—ä–µ–∫—Ü–∏–µ–π")
    void registerWithInvalidSpecialEmail(String email, String caseDescription) {
        RegisterRequest request = userTestUtil.generateRandomUser().toBuilder()
                .email(email)
                .build();
        Response response = apiHelper.post(AUTH_REGISTER.getPath(), request);

        ApiResponseAssert.assertErrorPartly(
                response,
                ApiError.BAD_REQUEST.getStatus(),
                ApiError.BAD_REQUEST.getCode(),
                EMAIL_FORMAT.getMsg()
        );
        DbResponseAssert.assertUserNotExistsInDb(appUserRepository, request.getUsername());
    }

    // ====== –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ ======

    @Test
    @DisplayName("Register USER: —É—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
    void shouldRegisterUserSuccessfully() {
        RegisterRequest request = userTestUtil.generateRandomUser();
        String userId = null;
        try {
            Response response = apiHelper.post(AUTH_REGISTER.getPath(), request);
            ApiResponseAssert.assertRegisterSuccess(
                    response,
                    request.getEmail(),
                    request.getUsername(),
                    request.getRole(),
                    request.getPhone()
            );
            userId = response.jsonPath().getString(DATA_ID.getPath());
            DbResponseAssert.assertUserCorrectInDb(
                    appUserRepository,
                    request.getUsername(),
                    request.getEmail(),
                    request.getPhone(),
                    USER);
        } finally {
            if (userId != null) {
                userTestUtil.deleteUser(userId);
                DbResponseAssert.assertUserDeletedInDb(appUserRepository, userId);
            }
        }
    }

    @Test
    @DisplayName("Register ADMIN: —É—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
    void shouldRegisterAdminSuccessfully() {
        RegisterRequest request = userTestUtil.generateRandomUser().toBuilder()
                .role(ADMIN.getEnName())
                .build();
        String userId = null;
        try {
            Response response = apiHelper.post(AUTH_REGISTER.getPath(), request);
            ApiResponseAssert.assertRegisterSuccess(
                    response,
                    request.getEmail(),
                    request.getUsername(),
                    request.getRole(),
                    request.getPhone()
            );
            userId = response.jsonPath().getString(DATA_ID.getPath());
            DbResponseAssert.assertUserCorrectInDb(
                    appUserRepository,
                    request.getUsername(),
                    request.getEmail(),
                    request.getPhone(),
                    ADMIN);
        } finally {
            if (userId != null) {
                userTestUtil.deleteUser(userId);
                DbResponseAssert.assertUserDeletedInDb(appUserRepository, userId);
            }
        }
    }

    @Test
    @DisplayName("Register: –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –≤ –∫–æ–Ω—Ü–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—Ä–µ–∑–∞–Ω—ã")
    void registerTrimAllFields() {
        String password = "  A1b!Trim  ";
        String email = "   user@mail.ru   ";
        String phone = "   79990009999  ";
        String username = " trimUser ";
        RegisterRequest request = RegisterRequest.builder()
                .username(username)
                .password(password)
                .role(USER.getEnName())
                .phone(phone)
                .email(email)
                .build();
        String userId = null;
        try {
            Response response = apiHelper.post(AUTH_REGISTER.getPath(), request);
            ApiResponseAssert.assertRegisterSuccess(
                    response,
                    email.trim(),
                    username.trim(),
                    USER.name(),
                    phone.trim()
            );
            userId = response.jsonPath().getString(DATA_ID.getPath());
            DbResponseAssert.assertUserCorrectInDb(
                    appUserRepository,
                    username.trim(),
                    email.trim(),
                    phone.trim(),
                    USER);
        } finally {
            if (userId != null) {
                userTestUtil.deleteUser(userId);
                DbResponseAssert.assertUserDeletedInDb(appUserRepository, userId);
            }
        }
    }

    @Test
    @DisplayName("Register: –ª–∏—à–Ω–∏–µ –ø–æ–ª—è –≤ body (ignored)")
    void registerWithExtraFields() {
        String password = TestDataUtil.validPassword();
        String email = TestDataUtil.randomEmail();
        String phone = TestDataUtil.randomPhone();
        String username = TestDataUtil.randomUsername();
        String shouldBeIgnored = "shouldBeIgnored";
        Map<String, Object> request = new HashMap<>();
        request.put("username", username);
        request.put("password", password);
        request.put("role", USER);
        request.put("phone", phone);
        request.put("email", email);
        request.put("extraField", shouldBeIgnored);
        String userId = null;
        try {
            Response response = apiHelper.post(AUTH_REGISTER.getPath(), request);
            ApiResponseAssert.assertRegisterSuccess(
                    response,
                    email,
                    username,
                    USER.name(),
                    phone
            );
            userId = response.jsonPath().getString(DATA_ID.getPath());
            DbResponseAssert.assertUserCorrectInDb(
                    appUserRepository,
                    username,
                    email,
                    phone,
                    USER);
        } finally {
            if (userId != null) {
                userTestUtil.deleteUser(userId);
                DbResponseAssert.assertUserDeletedInDb(appUserRepository, userId);
            }
        }
    }

    @Test
    @DisplayName("Register: Custom headers ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    void registerWithCustomHeaders() {
        RegisterRequest request = userTestUtil.generateRandomUser();
        String userId = null;
        try {
            Response response = given()
                    .header("X-Custom-Header", "test")
                    .contentType(ContentType.JSON)
                    .body(request)
                    .when()
                    .post(AUTH_REGISTER.getPath());
            ApiResponseAssert.assertRegisterSuccess(
                    response,
                    request.getEmail(),
                    request.getUsername(),
                    USER.getEnName(),
                    request.getPhone()
            );
            userId = response.jsonPath().getString(DATA_ID.getPath());
            DbResponseAssert.assertUserCorrectInDb(
                    appUserRepository,
                    request.getUsername(),
                    request.getEmail(),
                    request.getPhone(),
                    USER
            );
        } finally {
            if (userId != null) {
                userTestUtil.deleteUser(userId);
                DbResponseAssert.assertUserDeletedInDb(appUserRepository, userId);
            }
        }
    }

    // ====== –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ (–∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏ –¥—É–±–ª–∏–∫–∞—Ç—ã) ======

    @Test
    @DisplayName("Register USER: –ø–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å —Ç–µ–º –∂–µ username")
    void registerWithDuplicateUsernameUSER() {
        String username = TestDataUtil.randomUsername();
        RegisterRequest first = userTestUtil.generateRandomUser().toBuilder()
                .username(username)
                .build();
        String userId = null;
        try {
            Response firstResponse = apiHelper.post(AUTH_REGISTER.getPath(), first);
            ApiResponseAssert.assertRegisterSuccess(
                    firstResponse,
                    first.getEmail(),
                    first.getUsername(),
                    first.getRole(),
                    first.getPhone()
            );
            userId = firstResponse.jsonPath().getString(DATA_ID.getPath());
            DbResponseAssert.assertUserCorrectInDb(
                    appUserRepository,
                    first.getUsername(),
                    first.getEmail(),
                    first.getPhone(),
                    USER);
            RegisterRequest second = userTestUtil.generateRandomUser().toBuilder()
                    .username(username)
                    .build();
            Response secondResponse = apiHelper.post(AUTH_REGISTER.getPath(), second);
            ApiResponseAssert.assertError(
                    secondResponse,
                    USER_ALREADY_EXISTS.getStatus(),
                    USER_ALREADY_EXISTS.getCode(),
                    ErrorMessage.USER_ALREADY_EXISTS.getMsg()
            );
            DbResponseAssert.assertUserCountByField(appUserRepository, "username", username, 1);
        } finally {
            if (userId != null) {
                userTestUtil.deleteUser(userId);
                DbResponseAssert.assertUserDeletedInDb(appUserRepository, userId);
            }
        }
    }

    @Test
    @DisplayName("Register ADMIN: –ø–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å —Ç–µ–º –∂–µ username")
    void registerWithDuplicateUsernameADMIN() {
        String username = TestDataUtil.randomUsername();
        RegisterRequest first = userTestUtil.generateRandomUser().toBuilder()
                .username(username)
                .role(ADMIN.getEnName())
                .build();
        String userId = null;
        try {
            Response firstResponse = apiHelper.post(AUTH_REGISTER.getPath(), first);
            ApiResponseAssert.assertRegisterSuccess(
                    firstResponse,
                    first.getEmail(),
                    first.getUsername(),
                    first.getRole(),
                    first.getPhone()
            );
            userId = firstResponse.jsonPath().getString(DATA_ID.getPath());
            DbResponseAssert.assertUserCorrectInDb(
                    appUserRepository,
                    first.getUsername(),
                    first.getEmail(),
                    first.getPhone(),
                    ADMIN);
            RegisterRequest second = userTestUtil.generateRandomUser().toBuilder()
                    .username(username)
                    .build();
            Response secondResponse = apiHelper.post(AUTH_REGISTER.getPath(), second);
            ApiResponseAssert.assertError(
                    secondResponse,
                    USER_ALREADY_EXISTS.getStatus(),
                    USER_ALREADY_EXISTS.getCode(),
                    ErrorMessage.USER_ALREADY_EXISTS.getMsg()
            );
            DbResponseAssert.assertUserCountByField(appUserRepository, "username", username, 1);
        } finally {
            if (userId != null) {
                userTestUtil.deleteUser(userId);
                DbResponseAssert.assertUserDeletedInDb(appUserRepository, userId);
            }
        }
    }

    @Test
    @DisplayName("Register: –ø–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å —Ç–µ–º –∂–µ email")
    void registerWithDuplicateEmail() {
        String email = TestDataUtil.randomEmail();
        RegisterRequest first = userTestUtil.generateRandomUser().toBuilder()
                .email(email)
                .build();
        String userIdFirst = null;
        String userIdSecond = null;
        try {
            Response firstResponse = apiHelper.post(AUTH_REGISTER.getPath(), first);
            ApiResponseAssert.assertRegisterSuccess(
                    firstResponse,
                    first.getEmail(),
                    first.getUsername(),
                    first.getRole(),
                    first.getPhone()
            );
            userIdFirst = firstResponse.jsonPath().getString(DATA_ID.getPath());
            DbResponseAssert.assertUserCorrectInDb(
                    appUserRepository,
                    first.getUsername(),
                    first.getEmail(),
                    first.getPhone(),
                    USER);
            RegisterRequest second = userTestUtil.generateRandomUser().toBuilder()
                    .email(email)
                    .build();
            Response secondResponse = apiHelper.post(AUTH_REGISTER.getPath(), second);
            ApiResponseAssert.assertRegisterSuccess(
                    secondResponse,
                    second.getEmail(),
                    second.getUsername(),
                    second.getRole(),
                    second.getPhone()
            );
            userIdSecond = secondResponse.jsonPath().getString(DATA_ID.getPath());
            DbResponseAssert.assertUserCorrectInDb(
                    appUserRepository,
                    second.getUsername(),
                    second.getEmail(),
                    second.getPhone(),
                    USER);
            DbResponseAssert.assertUserCountByField(appUserRepository, "email", email, 2);
        } finally {
            if (userIdFirst != null || userIdSecond != null) {
                userTestUtil.deleteUser(userIdFirst);
                userTestUtil.deleteUser(userIdSecond);
                DbResponseAssert.assertUserDeletedInDb(appUserRepository, userIdFirst);
                DbResponseAssert.assertUserDeletedInDb(appUserRepository, userIdSecond);
            }
        }
    }

    @Test
    @DisplayName("Register: –ø–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å —Ç–µ–º –∂–µ phone")
    void registerWithDuplicatePhone() {
        String phone = TestDataUtil.randomPhone();
        RegisterRequest first = userTestUtil.generateRandomUser().toBuilder()
                .phone(phone)
                .build();
        String userIdFirst = null;
        String userIdSecond = null;
        try {
            Response firstResponse = apiHelper.post(AUTH_REGISTER.getPath(), first);
            ApiResponseAssert.assertRegisterSuccess(
                    firstResponse,
                    first.getEmail(),
                    first.getUsername(),
                    first.getRole(),
                    first.getPhone()
            );
            userIdFirst = firstResponse.jsonPath().getString(DATA_ID.getPath());
            DbResponseAssert.assertUserCorrectInDb(
                    appUserRepository,
                    first.getUsername(),
                    first.getEmail(),
                    first.getPhone(),
                    USER);
            RegisterRequest second = userTestUtil.generateRandomUser().toBuilder()
                    .phone(phone)
                    .build();
            Response secondResponse = apiHelper.post(AUTH_REGISTER.getPath(), second);
            ApiResponseAssert.assertRegisterSuccess(
                    secondResponse,
                    second.getEmail(),
                    second.getUsername(),
                    second.getRole(),
                    second.getPhone()
            );
            userIdSecond = secondResponse.jsonPath().getString(DATA_ID.getPath());
            DbResponseAssert.assertUserCorrectInDb(
                    appUserRepository,
                    second.getUsername(),
                    second.getEmail(),
                    second.getPhone(),
                    USER);
            DbResponseAssert.assertUserCountByField(appUserRepository, "phone", phone, 2);
        } finally {
            if (userIdFirst != null || userIdSecond != null) {
                userTestUtil.deleteUser(userIdFirst);
                userTestUtil.deleteUser(userIdSecond);
                DbResponseAssert.assertUserDeletedInDb(appUserRepository, userIdFirst);
                DbResponseAssert.assertUserDeletedInDb(appUserRepository, userIdSecond);
            }
        }
    }

    @Test
    @DisplayName("Register ADMIN: –Ω–µ–ª—å–∑—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª–µ–µ 3-—Ö –∞–¥–º–∏–Ω–æ–≤")
    void shouldNotAllowMoreThanThreeAdmins() {
        int adminsBefore = appUserRepository.countByRole(ADMIN);
        int canCreate = 3 - adminsBefore;
        for (int i = 0; i < canCreate; i++) {
            RegisterRequest request = userTestUtil.generateRandomUser().toBuilder()
                    .role(ADMIN.getEnName())
                    .build();
            Response response = apiHelper.post(AUTH_REGISTER.getPath(), request);
            ApiResponseAssert.assertRegisterSuccess(
                    response,
                    request.getEmail(),
                    request.getUsername(),
                    request.getRole(),
                    request.getPhone()
            );
            String userId = response.jsonPath().getString(DATA_ID.getPath());
            createdUserIds.add(userId);
            DbResponseAssert.assertUserCorrectInDb(
                    appUserRepository,
                    request.getUsername(),
                    request.getEmail(),
                    request.getPhone(),
                    ADMIN
            );
        }
        RegisterRequest extraAdmin = userTestUtil.generateRandomUser().toBuilder()
                .role(ADMIN.getEnName())
                .build();
        Response failResponse = apiHelper.post(AUTH_REGISTER.getPath(), extraAdmin);
        ApiResponseAssert.assertError(
                failResponse,
                FORBIDDEN.getStatus(),
                FORBIDDEN.getCode(),
                ADMIN_LIMIT.getMsg()
        );
        DbResponseAssert.assertUserNotExistsInDb(appUserRepository, extraAdmin.getUsername());
        for (String userId : createdUserIds) {
            userTestUtil.deleteUser(userId);
            DbResponseAssert.assertUserDeletedInDb(appUserRepository, userId);
        }
        createdUserIds.clear();
    }

    // ====== –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ ======

    @Test
    @DisplayName("Register: –ø—É—Å—Ç–æ–π body \"\"")
    void registerWithEmptyBody() {
        String badRequestJson = "";
        long countBefore = appUserRepository.count();
        Response response = apiHelper.post(AUTH_REGISTER.getPath(), badRequestJson);
        ApiResponseAssert.assertErrorPartly(
                response,
                ApiError.BAD_REQUEST.getStatus(),
                ApiError.BAD_REQUEST.getCode(),
                INVALID_OR_EMPTY_JSON.getMsg()
        );
        long countAfter = appUserRepository.count();
        assertEquals(countBefore, countAfter, "–í –ë–î –Ω–µ –¥–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
    }

    @Test
    @DisplayName("Register: –ø—É—Å—Ç–æ–π body {}")
    void registerWithEmptyBracketsBody() {
        String badRequestJson = "{}";
        long countBefore = appUserRepository.count();
        Response response = apiHelper.post(AUTH_REGISTER.getPath(), badRequestJson);
        ApiResponseAssert.assertErrorPartly(
                response,
                ApiError.BAD_REQUEST.getStatus(),
                ApiError.BAD_REQUEST.getCode(),
                EMPTY_USERNAME.getMsg()
        );
        long countAfter = appUserRepository.count();
        assertEquals(countBefore, countAfter, "–í –ë–î –Ω–µ –¥–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
    }

    @Test
    @DisplayName("Register: –Ω–µ—Ç body")
    void registerNoBody() {
        long countBefore = appUserRepository.count();
        Response response = RestAssured
                .given()
                .contentType("application/json")
                .post(AUTH_REGISTER.getPath())
                .andReturn();
        assertEquals(ApiError.BAD_REQUEST.getStatus(), response.statusCode());
        assertTrue(response.asString().contains(ApiError.BAD_REQUEST.getCode()), "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏");
        assertTrue(response.asString().contains(INVALID_OR_EMPTY_JSON.getMsg()), "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É—Å—Ç–æ–º JSON");
        long countAfter = appUserRepository.count();
        assertEquals(countBefore, countAfter, "–í –ë–î –Ω–µ –¥–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
    }

    @ParameterizedTest(name = "[{index}] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON: {1}")
    @MethodSource("invalidJsonRequests")
    @DisplayName("Register: –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON (–º–∞—Å—Å–∏–≤, —á–∏—Å–ª–æ, —Å—Ç—Ä–æ–∫–∞, null, –Ω–µ—Ç –∫–∞–≤—ã—á–µ–∫/—Å–∫–æ–±–∫–∏)")
    void registerWithInvalidJson(String badRequestJson, String caseDescription) {
        long countBefore = appUserRepository.count();
        Response response = apiHelper.post(AUTH_REGISTER.getPath(), badRequestJson);
        ApiResponseAssert.assertErrorPartly(
                response,
                ApiError.BAD_REQUEST.getStatus(),
                ApiError.BAD_REQUEST.getCode(),
                INVALID_OR_EMPTY_JSON.getMsg()
        );
        long countAfter = appUserRepository.count();
        assertEquals(countBefore, countAfter, "–í –ë–î –Ω–µ –¥–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
    }

    // ====== Content-Type –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ ======

    @Test
    @DisplayName("Register: Content-Type –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    void registerNoContentType() {
        RegisterRequest request = userTestUtil.generateRandomUser();
        long countBefore = appUserRepository.count();
        Response response = given()
                .body(request)
                .when()
                .post(AUTH_REGISTER.getPath());
        assertEquals(UNSUPPORTED_MEDIA_TYPE.getStatus(), response.statusCode());
        assertTrue(response.asString().contains(UNSUPPORTED_MEDIA_TYPE.getCode()), "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏");
        assertTrue(response.asString().contains(ErrorMessage.UNSUPPORTED_MEDIA_TYPE.getMsg()),
                "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–º Content-Type");
        long countAfter = appUserRepository.count();
        assertEquals(countBefore, countAfter, "–í –ë–î –Ω–µ –¥–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
    }

    @Test
    @DisplayName("Register: Content-Type = text/plain")
    void registerTextPlain() {
        long countBefore = appUserRepository.count();
        Response response = given()
                .contentType("text/plain")
                .body("{\"request\"}")
                .when()
                .post(AUTH_REGISTER.getPath());
        assertEquals(UNSUPPORTED_MEDIA_TYPE.getStatus(), response.statusCode());
        assertTrue(response.asString().contains(UNSUPPORTED_MEDIA_TYPE.getCode()), "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏");
        assertTrue(response.asString().contains(ErrorMessage.UNSUPPORTED_MEDIA_TYPE.getMsg()),
                "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–º Content-Type");
        long countAfter = appUserRepository.count();
        assertEquals(countBefore, countAfter, "–í –ë–î –Ω–µ –¥–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
    }

    @Test
    @DisplayName("Register: Content-Type = application/javascript")
    void registerJs() {
        long countBefore = appUserRepository.count();
        Response response = given()
                .contentType("text/javascript")
                .body("var x = 1;")
                .when()
                .post(AUTH_REGISTER.getPath());
        assertEquals(UNSUPPORTED_MEDIA_TYPE.getStatus(), response.statusCode());
        assertTrue(response.asString().contains(UNSUPPORTED_MEDIA_TYPE.getCode()), "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏");
        assertTrue(response.asString().contains(ErrorMessage.UNSUPPORTED_MEDIA_TYPE.getMsg()),
                "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–º Content-Type");
        long countAfter = appUserRepository.count();
        assertEquals(countBefore, countAfter, "–í –ë–î –Ω–µ –¥–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
    }

    @Test
    @DisplayName("Register: Content-Type = application/xml")
    void registerXml() {
        long countBefore = appUserRepository.count();
        Response response = given()
                .contentType("text/xml")
                .body("<user><username>xml</username></user>")
                .when()
                .post(AUTH_REGISTER.getPath());
        assertEquals(UNSUPPORTED_MEDIA_TYPE.getStatus(), response.statusCode());
        assertTrue(response.asString().contains(UNSUPPORTED_MEDIA_TYPE.getCode()), "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏");
        assertTrue(response.asString().contains(ErrorMessage.UNSUPPORTED_MEDIA_TYPE.getMsg()),
                "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–º Content-Type");
        long countAfter = appUserRepository.count();
        assertEquals(countBefore, countAfter, "–í –ë–î –Ω–µ –¥–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
    }

    @Test
    @DisplayName("Register: Content-Type = text/html")
    void registerHtml() {
        long countBefore = appUserRepository.count();
        Response response = given()
                .contentType("text/html")
                .body("<div>hello</div>")
                .when()
                .post(AUTH_REGISTER.getPath());
        assertEquals(UNSUPPORTED_MEDIA_TYPE.getStatus(), response.statusCode());
        assertTrue(response.asString().contains(UNSUPPORTED_MEDIA_TYPE.getCode()), "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏");
        assertTrue(response.asString().contains(ErrorMessage.UNSUPPORTED_MEDIA_TYPE.getMsg()),
                "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–º Content-Type");
        long countAfter = appUserRepository.count();
        assertEquals(countBefore, countAfter, "–í –ë–î –Ω–µ –¥–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
    }

    @Test
    @DisplayName("Register: Content-Type = multipart/form-data")
    void registerMultipart() {
        long countBefore = appUserRepository.count();
        Response response = given()
                .multiPart("file", "filename.txt", "some text".getBytes())
                .when()
                .post(AUTH_REGISTER.getPath());
        assertEquals(UNSUPPORTED_MEDIA_TYPE.getStatus(), response.statusCode());
        assertTrue(response.asString().contains(UNSUPPORTED_MEDIA_TYPE.getCode()), "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏");
        assertTrue(response.asString().contains(ErrorMessage.UNSUPPORTED_MEDIA_TYPE.getMsg()),
                "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–º Content-Type");
        long countAfter = appUserRepository.count();
        assertEquals(countBefore, countAfter, "–í –ë–î –Ω–µ –¥–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
    }

    @Test
    @DisplayName("Register: Content-Type = application/x-www-form-urlencoded")
    void registerUrlEncoded() {
        long countBefore = appUserRepository.count();
        Response response = given()
                .contentType("application/x-www-form-urlencoded")
                .formParam("username", "user")
                .formParam("password", "A1b!test")
                .formParam("role", USER.getEnName())
                .formParam("phone", "79990000001")
                .formParam("email", "user@mail.ru")
                .when()
                .post(AUTH_REGISTER.getPath());
        assertEquals(UNSUPPORTED_MEDIA_TYPE.getStatus(), response.statusCode());
        assertTrue(response.asString().contains(UNSUPPORTED_MEDIA_TYPE.getCode()), "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏");
        assertTrue(response.asString().contains(ErrorMessage.UNSUPPORTED_MEDIA_TYPE.getMsg()),
                "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–º Content-Type");
        long countAfter = appUserRepository.count();
        assertEquals(countBefore, countAfter, "–í –ë–î –Ω–µ –¥–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
    }

    @Test
    @DisplayName("Register: JSON —Å Content-Type text/plain")
    void registerJsonWithTextPlain() {
        String request = "{"
                + "\"username\": \"" + TestDataUtil.randomUsername() + "\","
                + "\"password\": \"" + TestDataUtil.validPassword() + "\","
                + "\"role\": \"" + USER.getEnName() + "\","
                + "\"phone\": \"" + TestDataUtil.randomPhone() + "\","
                + "\"email\": \"" + TestDataUtil.randomEmail() + "\""
                + "}";
        long countBefore = appUserRepository.count();
        Response response = given()
                .contentType("text/plain")
                .body(request)
                .when()
                .post(AUTH_REGISTER.getPath());
        assertEquals(UNSUPPORTED_MEDIA_TYPE.getStatus(), response.statusCode());
        assertTrue(response.asString().contains(UNSUPPORTED_MEDIA_TYPE.getCode()), "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏");
        assertTrue(response.asString().contains(ErrorMessage.UNSUPPORTED_MEDIA_TYPE.getMsg()),
                "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–º Content-Type");
        long countAfter = appUserRepository.count();
        assertEquals(countBefore, countAfter, "–í –ë–î –Ω–µ –¥–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
    }

    // ====== HTTP-–º–µ—Ç–æ–¥ –∏ endpoint ======

    @Test
    @DisplayName("Register: GET –≤–º–µ—Å—Ç–æ POST")
    void registerGetInsteadOfPost() {
        String get = "GET";
        RegisterRequest request = userTestUtil.generateRandomUser();
        long countBefore = appUserRepository.count();
        Response response = given()
                .contentType(ContentType.JSON)
                .body(request)
                .when()
                .get(AUTH_REGISTER.getPath());
        ApiResponseAssert.assertError(
                response,
                METHOD_NOT_ALLOWED.getStatus(),
                METHOD_NOT_ALLOWED.getCode(),
                String.format(ErrorMessage.METHOD_NOT_ALLOWED.getMsg(), get)
        );
        long countAfter = appUserRepository.count();
        assertEquals(countBefore, countAfter, "–í –ë–î –Ω–µ –¥–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
    }

    @Test
    @DisplayName("Register: PUT –≤–º–µ—Å—Ç–æ POST")
    void registerPutInsteadOfPost() {
        String put = "PUT";
        RegisterRequest request = userTestUtil.generateRandomUser();
        long countBefore = appUserRepository.count();
        Response response = given()
                .contentType(ContentType.JSON)
                .body(request)
                .when()
                .put(AUTH_REGISTER.getPath());
        ApiResponseAssert.assertError(
                response,
                METHOD_NOT_ALLOWED.getStatus(),
                METHOD_NOT_ALLOWED.getCode(),
                String.format(ErrorMessage.METHOD_NOT_ALLOWED.getMsg(), put)
        );
        long countAfter = appUserRepository.count();
        assertEquals(countBefore, countAfter, "–í –ë–î –Ω–µ –¥–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
    }

    @Test
    @DisplayName("Register: DELETE –≤–º–µ—Å—Ç–æ POST")
    void registerDeleteInsteadOfPost() {
        String delete = "DELETE";
        RegisterRequest request = userTestUtil.generateRandomUser();
        long countBefore = appUserRepository.count();
        Response response = given()
                .contentType(ContentType.JSON)
                .body(request)
                .when()
                .delete(AUTH_REGISTER.getPath());
        ApiResponseAssert.assertError(
                response,
                METHOD_NOT_ALLOWED.getStatus(),
                METHOD_NOT_ALLOWED.getCode(),
                String.format(ErrorMessage.METHOD_NOT_ALLOWED.getMsg(), delete)
        );
        long countAfter = appUserRepository.count();
        assertEquals(countBefore, countAfter, "–í –ë–î –Ω–µ –¥–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
    }

    @Test
    @DisplayName("Register: –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π endpoint")
    void registerNotExistingEndpoint() {
        RegisterRequest request = userTestUtil.generateRandomUser();
        long countBefore = appUserRepository.count();
        Response response = given()
                .contentType(ContentType.JSON)
                .body(request)
                .when()
                .post(AUTH_REGISTER_NOT_EXIST.getPath());
        ApiResponseAssert.assertError(
                response,
                NOT_FOUND.getStatus(),
                NOT_FOUND.getCode(),
                ENDPOINT_NOT_FOUND.getMsg()
        );
        long countAfter = appUserRepository.count();
        assertEquals(countBefore, countAfter, "–í –ë–î –Ω–µ –¥–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
    }

    // ====== HTTP-–æ—Ç–≤–µ—Ç (meta) ======

    @Test
    @DisplayName("Register: –û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç Set-Cookie")
    void registerNoSetCookieInResponse() {
        RegisterRequest request = userTestUtil.generateRandomUser();
        String userId = null;
        try {
            Response response = given()
                    .contentType(ContentType.JSON)
                    .body(request)
                    .when()
                    .post(AUTH_REGISTER.getPath())
                    .then()
                    .statusCode(OK.getStatus())
                    .header(ApiHeader.SET_COOKIE.getTitle(), nullValue())
                    .extract().response();
            ApiResponseAssert.assertRegisterSuccess(
                    response,
                    request.getEmail(),
                    request.getUsername(),
                    USER.getEnName(),
                    request.getPhone()
            );
            userId = response.jsonPath().getString(DATA_ID.getPath());
            DbResponseAssert.assertUserCorrectInDb(
                    appUserRepository,
                    request.getUsername(),
                    request.getEmail(),
                    request.getPhone(),
                    USER
            );
        } finally {
            if (userId != null) {
                userTestUtil.deleteUser(userId);
                DbResponseAssert.assertUserDeletedInDb(appUserRepository, userId);
            }
        }
    }

    @Test
    @DisplayName("Register: Cache-Control –∏ Pragma")
    void registerCacheControlHeaders() {
        RegisterRequest request = userTestUtil.generateRandomUser();
        String userId = null;
        try {
            Response response = given()
                    .contentType(ContentType.JSON)
                    .body(request)
                    .when()
                    .post(AUTH_REGISTER.getPath())
                    .then()
                    .statusCode(OK.getStatus())
                    .header(ApiHeader.CACHE_CONTROL.getTitle(), notNullValue())
                    .header(ApiHeader.PRAGMA.getTitle(), notNullValue())
                    .extract().response();
            ApiResponseAssert.assertRegisterSuccess(
                    response,
                    request.getEmail(),
                    request.getUsername(),
                    USER.getEnName(),
                    request.getPhone()
            );
            userId = response.jsonPath().getString(DATA_ID.getPath());
            DbResponseAssert.assertUserCorrectInDb(
                    appUserRepository,
                    request.getUsername(),
                    request.getEmail(),
                    request.getPhone(),
                    USER
            );
        } finally {
            if (userId != null) {
                userTestUtil.deleteUser(userId);
                DbResponseAssert.assertUserDeletedInDb(appUserRepository, userId);
            }
        }
    }

    @Test
    @DisplayName("Register: –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ <2 —Å–µ–∫ (200 OK)")
    void registerResponseTime200() {
        RegisterRequest request = userTestUtil.generateRandomUser();
        String userId = null;
        try {
            Response response = given()
                    .contentType(ContentType.JSON)
                    .body(request)
                    .when()
                    .post(AUTH_REGISTER.getPath())
                    .then()
                    .time(lessThan(2000L))
                    .statusCode(OK.getStatus())
                    .extract().response();
            ApiResponseAssert.assertRegisterSuccess(
                    response,
                    request.getEmail(),
                    request.getUsername(),
                    USER.getEnName(),
                    request.getPhone()
            );
            userId = response.jsonPath().getString(DATA_ID.getPath());
            DbResponseAssert.assertUserCorrectInDb(
                    appUserRepository,
                    request.getUsername(),
                    request.getEmail(),
                    request.getPhone(),
                    USER
            );
        } finally {
            if (userId != null) {
                userTestUtil.deleteUser(userId);
                DbResponseAssert.assertUserDeletedInDb(appUserRepository, userId);
            }
        }
    }

    @Test
    @DisplayName("Register: –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ <2 —Å–µ–∫ (400 Bad Request)")
    void registerResponseTime400() {
        String badRequestJson = "";
        long countBefore = appUserRepository.count();
        given()
                .contentType(ContentType.JSON)
                .body(badRequestJson)
                .when()
                .post(AUTH_REGISTER.getPath())
                .then()
                .time(lessThan(2000L))
                .statusCode(ApiError.BAD_REQUEST.getStatus());
        long countAfter = appUserRepository.count();
        assertEquals(countBefore, countAfter, "–í –ë–î –Ω–µ –¥–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
    }

    @Test
    @DisplayName("Register: –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ <2 —Å–µ–∫ (415 Unsupported Media Type)")
    void registerResponseTime415() {
        String badRequestJson = "";
        long countBefore = appUserRepository.count();
        given()
                .contentType("text/plain")
                .body(badRequestJson)
                .when()
                .post(AUTH_REGISTER.getPath())
                .then()
                .time(lessThan(2000L))
                .statusCode(UNSUPPORTED_MEDIA_TYPE.getStatus());
        long countAfter = appUserRepository.count();
        assertEquals(countBefore, countAfter, "–í –ë–î –Ω–µ –¥–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
    }

    @Test
    @DisplayName("Register: –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ <2 —Å–µ–∫ (404 Not Found)")
    void registerResponseTime404() {
        String badRequestJson = "";
        long countBefore = appUserRepository.count();
        given()
                .contentType(ContentType.JSON)
                .body(badRequestJson)
                .when()
                .post("/auth/not_found_endpoint")
                .then()
                .time(lessThan(2000L))
                .statusCode(NOT_FOUND.getStatus());
        long countAfter = appUserRepository.count();
        assertEquals(countBefore, countAfter, "–í –ë–î –Ω–µ –¥–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
    }

    @Test
    @DisplayName("Register: –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ <2 —Å–µ–∫ (405 Method not allowed)")
    void registerResponseTime405() {
        String badRequestJson = "";
        long countBefore = appUserRepository.count();
        given()
                .contentType(ContentType.JSON)
                .body(badRequestJson)
                .when()
                .get(AUTH_REGISTER.getPath())
                .then()
                .time(lessThan(2000L))
                .statusCode(METHOD_NOT_ALLOWED.getStatus());
        long countAfter = appUserRepository.count();
        assertEquals(countBefore, countAfter, "–í –ë–î –Ω–µ –¥–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
    }

    @Test
    @DisplayName("Register: Flood/Rate limit (5+ –ø–æ–¥—Ä—è–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π, –≤—Å–µ —É—Å–ø–µ—à–Ω—ã)")
    void registerFloodNoRateLimit() {
        List<String> createdUserIds = new ArrayList<>();
        try {
            for (int i = 1; i <= 7; i++) {
                RegisterRequest request = userTestUtil.generateRandomUser();
                Response response = apiHelper.post(AUTH_REGISTER.getPath(), request);
                ApiResponseAssert.assertRegisterSuccess(
                        response,
                        request.getEmail(),
                        request.getUsername(),
                        request.getRole(),
                        request.getPhone()
                );
                String userId = response.jsonPath().getString(DATA_ID.getPath());
                createdUserIds.add(userId);
                DbResponseAssert.assertUserCorrectInDb(
                        appUserRepository,
                        request.getUsername(),
                        request.getEmail(),
                        request.getPhone(),
                        USER
                );
            }
        } finally {
            for (String userId : createdUserIds) {
                userTestUtil.deleteUser(userId);
                DbResponseAssert.assertUserDeletedInDb(appUserRepository, userId);
            }
        }
    }

    @Test
    @DisplayName("Register: CORS preflight OPTIONS –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 200 –∏ CORS-–∑–∞–≥–æ–ª–æ–≤–∫–∏")
    void loginCorsOptionsRequest() {
        String origin = "http://localhost:3000";
        String method = "POST";
        given()
                .header("Origin", origin)
                .header("Access-Control-Request-Method", method)
                .when()
                .options(AUTH_REGISTER.getPath())
                .then()
                .statusCode(OK.getStatus())
                .header(ApiHeader.ACCESS_CONTROL_ALLOW_ORIGIN.getTitle(), equalTo(origin))
                .header(ApiHeader.ACCESS_CONTROL_ALLOW_METHODS.getTitle(), equalTo(method))
                .header(ApiHeader.ACCESS_CONTROL_ALLOW_CREDENTIALS.getTitle(), "true");
    }
}

/*
 * –ß–ï–ö–õ–ò–°–¢ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ /auth/register (positive + negative)
 *
 * ====== –í–∞–ª–∏–¥–∞—Ü–∏—è username ======
 * [ ] Register: username = –ø—É—Å—Ç–æ / –ø—Ä–æ–±–µ–ª / null   (–ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π)
 * [ ] Register: username = int –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏
 * [ ] Register: username = int —Å –ª–∏–¥–∏—Ä—É—é—â–∏–º –Ω—É–ª—ë–º
 * [ ] Register: username = 1 —Å–∏–º–≤–æ–ª (–Ω–µ–≤–∞–ª–∏–¥)
 * [ ] Register: username = 2 —Å–∏–º–≤–æ–ª–∞ (–≤–∞–ª–∏–¥)
 * [ ] Register: username = 32 —Å–∏–º–≤–æ–ª–∞ (–≤–∞–ª–∏–¥)
 * [ ] Register: username = 33 —Å–∏–º–≤–æ–ª–∞ (–Ω–µ–≤–∞–ª–∏–¥)
 * [ ] Register: username —Å emoji/—é–Ω–∏–∫–æ–¥–æ–º / XSS-–∏–Ω—ä–µ–∫—Ü–∏–µ–π / SQL-–∏–Ω—ä–µ–∫—Ü–∏–µ–π   (–ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π)
 * [ ] Register: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å —Ä–∞–∑–Ω—ã–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º username
 *
 * ====== –í–∞–ª–∏–¥–∞—Ü–∏—è password ======
 * [ ] Register: password = –ø—É—Å—Ç–æ / –ø—Ä–æ–±–µ–ª / null   (–ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π)
 * [ ] Register: password = int –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏
 * [ ] Register: password = int —Å –ª–∏–¥–∏—Ä—É—é—â–∏–º –Ω—É–ª—ë–º
 * [ ] Register: password = 5 —Å–∏–º–≤–æ–ª–æ–≤ (–Ω–µ–≤–∞–ª–∏–¥)
 * [ ] Register: password = 6 —Å–∏–º–≤–æ–ª–æ–≤ (–≤–∞–ª–∏–¥)
 * [ ] Register: password = 64 —Å–∏–º–≤–æ–ª–∞ (–≤–∞–ª–∏–¥)
 * [ ] Register: password = 65 —Å–∏–º–≤–æ–ª–æ–≤ (–Ω–µ–≤–∞–ª–∏–¥)
 * [ ] Register: password –Ω–µ–≤–∞–ª–∏–¥–µ–Ω (–ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π: –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–∞–≥–ª–∞–≤–Ω–æ–π, –º–∞–ª–µ–Ω—å–∫–æ–π, —Ü–∏—Ñ—Ä—ã, —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞, –∫–∏—Ä–∏–ª–ª–∏—Ü–∞, –ø—Ä–æ–±–µ–ª –∏ —Ç.–ø.)
 * [ ] Register: password —Å emoji/—é–Ω–∏–∫–æ–¥–æ–º / XSS-–∏–Ω—ä–µ–∫—Ü–∏–µ–π / SQL-–∏–Ω—ä–µ–∫—Ü–∏–µ–π   (–ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π)
 *
 * ====== –í–∞–ª–∏–¥–∞—Ü–∏—è role ======
 * [ ] Register: role = –±—É–∫–≤—ã —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
 * [ ] Register: role = –º–∞–ª–µ–Ω—å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏
 * [ ] Register: role = –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
 * [ ] Register: –Ω–µ–≤–∞–ª–∏–¥–Ω–∞—è —Ä–æ–ª—å (–ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π: –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, –ø—Ä–æ–±–µ–ª, null)
 * [ ] Register: role = int –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏
 * [ ] Register: role —Å emoji/—é–Ω–∏–∫–æ–¥–æ–º / XSS-–∏–Ω—ä–µ–∫—Ü–∏–µ–π / SQL-–∏–Ω—ä–µ–∫—Ü–∏–µ–π   (–ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π)
 *
 * ====== –í–∞–ª–∏–¥–∞—Ü–∏—è phone ======
 * [ ] Register: phone = null / –ø—É—Å—Ç–æ / –ø—Ä–æ–±–µ–ª   (–ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π)
 * [ ] Register: phone –Ω–µ–≤–∞–ª–∏–¥–µ–Ω (–ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π: 10/12 —Ü–∏—Ñ—Ä, –±—É–∫–≤—ã, —Å–∫–æ–±–∫–∏, ...)
 * [ ] Register: phone —Å emoji/—é–Ω–∏–∫–æ–¥–æ–º / XSS-–∏–Ω—ä–µ–∫—Ü–∏–µ–π / SQL-–∏–Ω—ä–µ–∫—Ü–∏–µ–π   (–ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π)
 *
 * ====== –í–∞–ª–∏–¥–∞—Ü–∏—è email ======
 * [ ] Register: email —Å –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏
 * [ ] Register: email –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ (–º–∏–Ω –¥–ª–∏–Ω–∞)
 * [ ] Register: email –≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ (255 —Å–∏–º–≤–æ–ª–æ–≤)
 * [ ] Register: email –≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ + 1 (256 —Å–∏–º–≤–æ–ª–æ–≤)
 * [ ] Register: email = null / –ø—É—Å—Ç–æ / –ø—Ä–æ–±–µ–ª   (–ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π)
 * [ ] Register: email –Ω–µ–≤–∞–ª–∏–¥–µ–Ω (–ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π: –≤—Å–µ –≥—Ä–∞–Ω–∏—á–Ω—ã–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∫–µ–π—Å—ã)
 * [ ] Register: email —Å emoji/—é–Ω–∏–∫–æ–¥–æ–º / XSS-–∏–Ω—ä–µ–∫—Ü–∏–µ–π / SQL-–∏–Ω—ä–µ–∫—Ü–∏–µ–π   (–ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π)
 *
 * ====== –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ ======
 * [ ] Register USER: —É—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
 * [ ] Register ADMIN: —É—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
 * [ ] Register: –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –≤ –∫–æ–Ω—Ü–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—Ä–µ–∑–∞–Ω—ã
 * [ ] Register: –ª–∏—à–Ω–∏–µ –ø–æ–ª—è –≤ body (ignored)
 * [ ] Register: Custom headers ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
 *
 * ====== –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ (–∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏ –¥—É–±–ª–∏–∫–∞—Ç—ã) ======
 * [ ] Register USER: –ø–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å —Ç–µ–º –∂–µ username
 * [ ] Register ADMIN: –ø–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å —Ç–µ–º –∂–µ username
 * [ ] Register: –ø–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å —Ç–µ–º –∂–µ email
 * [ ] Register: –ø–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å —Ç–µ–º –∂–µ phone
 * [ ] Register ADMIN: –Ω–µ–ª—å–∑—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª–µ–µ 3-—Ö –∞–¥–º–∏–Ω–æ–≤
 *
 * ====== –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ ======
 * [ ] Register: –ø—É—Å—Ç–æ–π body ""
 * [ ] Register: –ø—É—Å—Ç–æ–π body {}
 * [ ] Register: –Ω–µ—Ç body
 * [ ] Register: –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ –æ–±—ä–µ–∫—Ç–∞
 * [ ] Register: —á–∏—Å–ª–æ –≤–º–µ—Å—Ç–æ –æ–±—ä–µ–∫—Ç–∞
 * [ ] Register: —Å—Ç—Ä–æ–∫–∞ –≤–º–µ—Å—Ç–æ –æ–±—ä–µ–∫—Ç–∞
 * [ ] Register: null –≤–º–µ—Å—Ç–æ –æ–±—ä–µ–∫—Ç–∞
 * [ ] Register: –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON (–Ω–µ—Ç –∫–∞–≤—ã—á–µ–∫, –Ω–µ—Ç —Å–∫–æ–±–∫–∏)   (–ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π)
 *
 * ====== Content-Type –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ ======
 * [ ] Register: Content-Type –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
 * [ ] Register: Content-Type = text/plain
 * [ ] Register: Content-Type = application/javascript
 * [ ] Register: Content-Type = application/xml
 * [ ] Register: Content-Type = text/html
 * [ ] Register: Content-Type = multipart/form-data
 * [ ] Register: Content-Type = application/x-www-form-urlencoded
 * [ ] Register: JSON —Å Content-Type text/plain
 *
 * ====== HTTP-–º–µ—Ç–æ–¥ –∏ endpoint ======
 * [ ] Register: GET –≤–º–µ—Å—Ç–æ POST
 * [ ] Register: PUT –≤–º–µ—Å—Ç–æ POST
 * [ ] Register: DELETE –≤–º–µ—Å—Ç–æ POST
 * [ ] Register: –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π endpoint
 *
 * ====== HTTP-–æ—Ç–≤–µ—Ç (meta) ======
 * [ ] Register: –û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç Set-Cookie
 * [ ] Register: Cache-Control –∏ Pragma
 * [ ] Register: –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ <2 —Å–µ–∫ (200 OK)
 * [ ] Register: –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ <2 —Å–µ–∫ (400 Bad Request)
 * [ ] Register: –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ <2 —Å–µ–∫ (415 Unsupported Media Type)
 * [ ] Register: –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ <2 —Å–µ–∫ (404 Not Found)
 * [ ] Register: –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ <2 —Å–µ–∫ (405 Method not allowed)
 * [ ] Register: Flood/Rate limit (5+ –ø–æ–¥—Ä—è–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π, –≤—Å–µ —É—Å–ø–µ—à–Ω—ã)
 * [ ] Register: CORS preflight OPTIONS –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 200 –∏ CORS-–∑–∞–≥–æ–ª–æ–≤–∫–∏
 */